"""
Django settings for manager project.

Generated by 'django-admin startproject' using Django 3.1.8.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True if 'true' == os.getenv('DJANGO_DEBUG_FLAG', 'false').lower() else False

ALLOWED_HOSTS = [os.getenv('DJANGO_WWW_VHOST')]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'django.forms',
    'import_export',
    'django_bootstrap_breadcrumbs',
    'axes',
    'account.apps.AccountConfig',   # account app
    'todolist.apps.TodolistConfig', # todolist app
]

AUTHENTICATION_BACKENDS = [
    'axes.backends.AxesBackend', # required first
    'django.contrib.auth.backends.ModelBackend',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware', # to transform the using language
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'axes.middleware.AxesMiddleware', # required last
]

# setup session
SESSION_COOKIE_AGE = 3600              # expiration date is 60 minutes
SESSION_EXPIRE_AT_BROWSER_CLOSE = True # clear session information when user closed browser
SESSION_SAVE_EVERY_REQUEST = True      # update session information every request

ROOT_URLCONF = 'manager.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.request', # for django bootstrap breadcrumbs
            ],
            'libraries': {
                'markdown_extras': 'custom_templatetags.markdown_extras',
                'pagination': 'custom_templatetags.pagination',
            },
        },
    },
]

FORM_RENDERER = 'django.forms.renderers.TemplatesSetting'
BREADCRUMBS_TEMPLATE = 'django_bootstrap_breadcrumbs/bootstrap4.html'

WSGI_APPLICATION = 'manager.wsgi.application'

# ==========
# setup Axes
# ==========
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
    },
    'axes_cache': {
        'BACKEND': 'django.core.cache.backends.dummy.DummyCache',
    }
}
AXES_CACHE = 'axes'
AXES_FAILURE_LIMIT = 11 # failed login counter
AXES_COOLOFF_TIME = 12  # account lock time
AXES_META_PRECEDENCE_ORDER = (
    'HTTP_X_FORWARDED_FOR',
    'REMOTE_ADDR',
)

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.getenv('MYSQL_DATABASE'),
        'USER': os.getenv('MYSQL_USER'),
        'PASSWORD': os.getenv('MYSQL_PASSWORD'),
        'HOST': os.getenv('DB_HOST'),
        'PORT': '3306',
        'OPTIONS': {
            'charset': os.getenv('MYSQL_CHARSET'),
        },
        'TEST': {
            'NAME': 'unit_test_database',  # setting database for unit test
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LOCALE_PATHS = (
    os.path.join(BASE_DIR, 'locale'),
)

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'ja'

TIME_ZONE = 'Asia/Tokyo'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = '/static'
MEDIA_URL  = '/media/'
MEDIA_ROOT = '/media'

# markdown extensions
MARKDOWN_EXTENSIONS = [
    'markdown.extensions.extra',
    'markdown.extensions.toc',
    'pymdownx.arithmatex',
]

# define custom user model
AUTH_USER_MODEL = 'account.User'
AUTH_PROFILE_MODULE = 'account.UserProfile'

# define login url and logout url
LOGIN_URL = 'account:login'
LOGIN_REDIRECT_URL = 'account:index'